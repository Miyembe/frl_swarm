#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import time
from geometry_msgs.msg import Twist
from gazebo_msgs.msg import ModelState, ModelStates

class Moving():
    def __init__(self):
        self.pub_model = rospy.Publisher('gazebo/set_model_state', ModelState, queue_size=1)
        self.model = rospy.wait_for_message('gazebo/model_states', ModelStates)
        self.num_dynamic_obs, self.list_obs_idx = self.count_obs(self.model)
        self.moving()

    def count_obs(self, model):
        num_dynamic_obs = 0
        list_obs_idx = []
        for i in range(len(model.name)):
            if 'dynamic' in model.name[i]:
                num_dynamic_obs += 1
                list_obs_idx.append(i)
        return num_dynamic_obs, list_obs_idx


    def moving(self):
        while not rospy.is_shutdown():
            model = rospy.wait_for_message('gazebo/model_states', ModelStates)
            
            obstacles = [ModelState() for _ in range(self.num_dynamic_obs)]
            print("len obstacles: {}".format(len(obstacles)))
            print("len models: {}".format(len(model.name)))
            for i in range(self.num_dynamic_obs):
                obstacles[i].model_name = model.name[self.list_obs_idx[i]]
                obstacles[i].pose = model.pose[self.list_obs_idx[i]]
                obstacles[i].twist = Twist()
                obstacles[i].twist.linear.x = 0.0
                obstacles[i].twist.angular.z = 0.0
                print("obstalces[i] Twist: {}".format(obstacles[i].twist))
                print("obstacles[i]: {}".format(obstacles[i].model_name))
                self.pub_model.publish(obstacles[i])
            time.sleep(0.1)

def main():
    rospy.init_node('moving_obstacle')
    moving = Moving()

if __name__ == '__main__':
    main()
